name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - master  # or main, depending on your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Prepare for Cloudflare Pages deployment
        run: |
          # Create _redirects file to handle client-side routing
          cat > out/_redirects << EOF
          # Redirect all requests to index.html for client-side routing
          /admin/* /index.html 200
          /* /index.html 200
          EOF
          
          # Create _headers file for proper caching
          cat > out/_headers << EOF
          # Headers for all routes
          /*
            Cache-Control: public, max-age=3600
          
          # Don't cache admin routes
          /admin/*
            Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate
            Pragma: no-cache
            Expires: 0
          EOF
          
          # Copy Functions directly to the output directory as a worker script
          mkdir -p out
          cat > out/_worker.js << EOF
          export default {
            async fetch(request, env) {
              const url = new URL(request.url);
              
              // Handle admin routes
              if (url.pathname.startsWith('/admin')) {
                // Add CORS headers
                const headers = new Headers({
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
                  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                  'Content-Type': 'application/json'
                });
                
                // Handle OPTIONS request for CORS preflight
                if (request.method === 'OPTIONS') {
                  return new Response(null, { headers });
                }
                
                // Mock news data for demonstration
                const newsItems = [
                  {
                    id: 1,
                    title: { fr: 'Actualité 1', ar: 'الخبر 1' },
                    excerpt: { fr: 'Extrait 1', ar: 'مقتطف 1' },
                    content: { fr: 'Contenu 1', ar: 'محتوى 1' },
                    image: 'https://via.placeholder.com/800x400',
                    category: { fr: 'Catégorie 1', ar: 'الفئة 1' },
                    date: new Date().toISOString()
                  },
                  {
                    id: 2,
                    title: { fr: 'Actualité 2', ar: 'الخبر 2' },
                    excerpt: { fr: 'Extrait 2', ar: 'مقتطف 2' },
                    content: { fr: 'Contenu 2', ar: 'محتوى 2' },
                    image: 'https://via.placeholder.com/800x400',
                    category: { fr: 'Catégorie 2', ar: 'الفئة 2' },
                    date: new Date().toISOString()
                  },
                  {
                    id: 3,
                    title: { fr: 'Actualité 3', ar: 'الخبر 3' },
                    excerpt: { fr: 'Extrait 3', ar: 'مقتطف 3' },
                    content: { fr: 'Contenu 3', ar: 'محتوى 3' },
                    image: 'https://via.placeholder.com/800x400',
                    category: { fr: 'Catégorie 3', ar: 'الفئة 3' },
                    date: new Date().toISOString()
                  }
                ];
                
                // Handle news API endpoints
                if (url.pathname.includes('/api/news')) {
                  // Get a specific news item by ID
                  const idMatch = url.pathname.match(/\/api\/news\/(\d+)/);
                  if (idMatch) {
                    const id = parseInt(idMatch[1]);
                    const newsItem = newsItems.find(item => item.id === id);
                    
                    if (newsItem) {
                      return new Response(JSON.stringify(newsItem), { headers });
                    } else {
                      return new Response(JSON.stringify({ error: 'News item not found' }), {
                        status: 404,
                        headers
                      });
                    }
                  }
                  
                  // Return all news items
                  return new Response(JSON.stringify(newsItems), { headers });
                }
                
                // For UI routes, serve the index.html
                return env.ASSETS.fetch(new Request(url.origin, request));
              }
              
              // For all other routes, pass through to the static assets
              return env.ASSETS.fetch(request);
            }
          };
          EOF
          
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Install wrangler
          npm install -g wrangler
          
          # Deploy to Cloudflare Pages
          echo "Deploying to Cloudflare Pages..."
          wrangler pages deploy out --project-name droitfpra --branch production 